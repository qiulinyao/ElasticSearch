package com.zts.search.config;

import org.apache.log4j.Logger;
import org.elasticsearch.client.transport.TransportClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.transport.InetSocketTransportAddress;
import org.elasticsearch.transport.client.PreBuiltTransportClient;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;

@Configuration
public class SearchConfig implements EnvironmentAware {

    private static Logger logger = Logger.getLogger(SearchConfig.class);
 
    public static String[] ES_HOST = {"127.0.0.1"};

    /**
     * http请求的端口是9200，客户端是9300
     */
    public final static int PORT = 9300;

    @Override
    public void setEnvironment(Environment environment) {

        String es_host = environment.getProperty("ES_HOST");
        if(es_host != null) {
            ES_HOST = es_host.split(",");
        }

        logger.info("ES_HOST=" + Arrays.toString(ES_HOST));
    }

    /**
     * 获取客户端连接信息
     * @Title: getConnect
     * @return void
     * @throws UnknownHostException
     */
    @Bean
    public TransportClient getConnect() throws UnknownHostException {
        Settings settings = Settings.builder().put("cluster.name", "es_product_cluster").build();

        TransportClient client = null;
        PreBuiltTransportClient preBuiltTransportClient = new PreBuiltTransportClient(settings);
        for(String host : ES_HOST){
            client = preBuiltTransportClient.addTransportAddresses(new InetSocketTransportAddress(InetAddress.getByName(host),PORT));
        }

        logger.info("elastic search 连接信息:" + client.toString());

        return client;
    }

    /**
     * 关闭连接
     * @Title: closeConnect
     * @author sunt
     * @date 2017年11月23日
     * @return void
     */
//    @After
//    public void closeConnect() {
//        if(null != client) {
//            logger.info("执行关闭连接操作...");
//            client.close();
//        }
//    }
}
